[buildout]
# Call your project any (legal python) name you like
# and which Pinax project you want to base it on:
# * basic_project
# * intranet_project
# * private_beta_project
# * social_project
# * temp_group_project
# If you have your own project brought in to this hierarchy
# (e.g., via svn) then the clone copying will not be done
# and your project will not be overwritten.

MYPROJECT_NAME = mysite
MYPROJECT_BASE = social_project

# You shouldn't need to change much below this unless you know
# what you're doing: adding parts, eggs, libraries, etc.

PINAX_DIR   = pinax
extra_paths = 
    ${buildout:MYPROJECT_NAME}
    ${buildout:MYPROJECT_NAME}/apps
    ${buildout:MYPROJECT_NAME}/apps/friends_app
    ${buildout:PINAX_DIR}/apps

versions   = versions
#allow-picked-versions  = false

find-links = http://pypi.pinaxproject.com/
download-cache = cache
install-from-cache = true

parts =
    pinax-core
    zlib
    PIL
    interpreter
    pinax
    clone_project

eggs =
    BeautifulSoup
    Creoleparser
    PIL
    Pygments
    diff-match-patch
    django-ajax-validation
    django-announcements
    django-app-plugins
    django-atomformat
    django-avatar
    django-bookmarks
    django-db-log
    django-dbtemplates
    django-email-confirmation
    django-extensions
    django-flag
    django-friends
    django-locations
    django-mailer
    django-messages
    django-microblogging
    django-notification
    django-oembed
    django-openid
    django-pagination
    django-photologue
    django-robots
    django-swaps
    django-tagging
    django-threadedcomments
    django-timezones
    django-uni-form
    django-voting
    django-wikiapp
    docutils
    elementtree
    feedparser
    gdata
    geopy
    ipython
    python-dateutil
    python-openid
    python-twitter
    python-yadis
    pytz
    simplejson
    textile
    vobject
    ybrowserauth

[versions]
PIL = 1.1.6
pytz = 2009a
django = 1.0.2
django-wikiapp = 0.1.2

[clone_project]
# I'm surprised there isn't a 'copytree' recipe nor
# a string replacer that doesn't require %(name) or ${name} markups.
recipe = iw.recipe.cmd:py
on_install = true
on_update = true
cmds =
  >>> dst_dir = os.path.join(os.getcwd(), "${buildout:MYPROJECT_NAME}")
  >>> if os.path.exists(dst_dir):
  ...     print "WARNING: dst dir=%s exists, not overwriting" % dst_dir
  ... else:
  ...     pinax_project_dir = os.path.join(os.getcwd(), "pinax", "projects", "${buildout:MYPROJECT_BASE}")
  ...     print "INFO: cloning pinax project=%s to dir=%s" % (pinax_project_dir, dst_dir)
  ...     if os.path.isdir(pinax_project_dir):
  ...         shutil.copytree(pinax_project_dir, dst_dir)
  ...     else:
  ...         raise RuntimeError, "Nonexistend project=%s at dir=%s" % (${buildout:MYPROJECT_BASE}, pinax_project_dir)
  ...     settingspy_path = os.path.join(dst_dir, "settings.py")
  ...     settingspy = file(settingspy_path, "r").read()
  ...     settingspy = settingspy.replace("'${buildout:MYPROJECT_BASE}.urls'", "'${buildout:MYPROJECT_NAME}.urls'")
  ...     file(settingspy_path, "w").write(settingspy)

# Build zlib for PIL, and PIL so we don't rely on something in the system

[zlib]
recipe = hexagonit.recipe.cmmi
url = http://www.zlib.net/zlib-1.2.3.tar.gz
configure-options = --shared

[PIL]
recipe = zc.recipe.egg:custom
egg = PIL
find-links = http://dist.repoze.org/
include-dirs = ${zlib:location}/include
library-dirs = ${zlib:location}/lib
rpath = ${zlib:location}/lib

[interpreter]
# A python interpreter with our eggs and libraries on its sys.path
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
extra-paths = ${buildout:extra_paths}
interpreter = pypinax
scripts = pypinax

[pinax]
recipe = djangorecipe
version = 1.0.2
settings = settings
eggs = ${buildout:eggs}
extra-paths = ${buildout:extra_paths}
project = ${buildout:MYPROJECT_NAME}

[pinax-core]
recipe = zerokspot.recipe.git
repository = git://github.com/pinax/pinax.git
